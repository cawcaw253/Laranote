name: CI

on: push

jobs:
  test-phpcs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@master

      - uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"

      - name: Install composer
        working-directory: ./src
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"

      - name: Test phpcs
        working-directory: ./src
        run: |
          composer install
          composer phpcs

  test-phpmd:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@master

      - uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"

      - name: Install composer
        working-directory: ./src
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"

      - name: Test phpmd
        working-directory: ./src
        run: |
          composer install
          composer phpmd

  build-nginx:
    if: github.ref == 'refs/heads/production'
    needs: [test-phpcs, test-phpmd]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set nginx config file for deploy
        working-directory: .
        run: sed -i 's/app/127.0.0.1/g' ./docker/nginx/default.conf

      - name: Build and push Nginx image to Amazon ECR
        env:
          NGINX_IMAGE: ${{ secrets.AWS_ECR_BASE_URI }}/laranote/nginx
        working-directory: .
        run: |
          docker build -t $NGINX_IMAGE:latest -t $NGINX_IMAGE:${{ github.sha }} -f ./docker/nginx/Dockerfile .
          docker push -a $NGINX_IMAGE

  build-app:
    if: github.ref == 'refs/heads/production'
    needs: [test-phpcs, test-phpmd]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set env file
        working-directory: ./src
        run: cp .env.prod .env

      - name: Set Additional env parameters from aws ssm for prod image
        working-directory: .
        run: |
          aws ssm get-parameters-by-path \
          --path /Laranote/ \
          --with-decryption \
          | jq -r '.Parameters[].Value' >> ./src/.env

      - name: Build and push App image to Amazon ECR
        env:
          APP_IMAGE: ${{ secrets.AWS_ECR_BASE_URI }}/laranote/app
        working-directory: .
        run: |
          docker build -t $APP_IMAGE:latest -t $APP_IMAGE:${{ github.sha }} -f ./docker/app/Dockerfile .
          docker push -a $APP_IMAGE

  deploy:
    if: github.ref == 'refs/heads/production'
    needs: [build-nginx, build-app]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run new task with updated image
        run: |
          aws ecs update-service \
          --cluster cluster-laranote \
          --service service-laranote \
          --force-new-deployment
